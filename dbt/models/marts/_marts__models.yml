
version: 2

models:
  - name: log_found_videos
    description: '{{ doc("log_found_videos") }}'
    tests:
      - dbt_utils.unique_combination_of_columns:
          name: 'unique_combination_of_columns: log_found_videos'
          combination_of_columns:
            - video_id
            - spotify_playlist_id
          where:
            "video_id is not null"
      - dbt_utils.expression_is_true:
          name: 'track_match <= total_tracks'
          expression: "track_match <= total_tracks"
    columns:
      - name: found
        tests:
          - not_null
          - accepted_values:
              values: ['Album', 'Playlist', 'Track']
      - name: youtube_title
        tests:
          - not_null
      - name: youtube_author
        tests:
          - not_null
      - name: spotify_title
        tests:
          - not_null
      - name: spotify_author
        tests:
          - not_null
      - name: found_by
        tests:
          - not_null
      - name: found_on_try
        tests:
          - not_null
      - name: status
        tests:
          - not_null
      - name: track_match
        tests:
          - not_null
      - name: total_tracks
        tests:
          - not_null
      - name: percentage_in_desc
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              name: 'percentage_in_desc <= 100'
              expression: "<= 100"
          - dbt_utils.expression_is_true:
              name: 'percentage_in_desc >= 0'
              expression: ">= 0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, percentage_in_desc, float64'
              column_type: float64
      - name: youtube_duration_timestamp
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, youtube_duration_timestamp, time'
              column_type: time
      - name: spotify_duration_timestamp
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, spotify_duration_timestamp, time'
              column_type: time
      - name: difference_sec
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, difference_sec, float64'
              column_type: float64


  - name: log_not_found_videos
    description: '{{ doc("log_not_found_videos") }}'
    tests:
      - dbt_utils.unique_combination_of_columns:
          name: 'unique_combination_of_columns: log_not_found_videos'
          combination_of_columns:
            - video_id
            - youtube_playlist_id
    columns:
      - name: video_id
        tests:
          - not_null
      - name: title
        tests:
          - not_null
      - name: author
        tests:
          - not_null
      - name: duration_ms
        tests:
          - not_null


  - name: log_for_tableau
    description: '{{ doc("log_for_tableau") }}'
    tests:
      - dbt_utils.expression_is_true:
          name: 'track_match <= total_tracks'
          expression: "track_match <= total_tracks"
    columns:
      - name: log_id
        tests:
          - unique
      - name: youtube_type
        tests:
          - not_null
      - name: spotify_type
        tests:
          - accepted_values:
              values: ['Album', 'Playlist', 'Track']
      - name: percentage_in_desc
        tests:
          - dbt_utils.expression_is_true:
              name: 'percentage_in_desc <= 100'
              expression: "<= 100"
          - dbt_utils.expression_is_true:
              name: 'percentage_in_desc >= 0'
              expression: ">= 0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, percentage_in_desc, float64'
              column_type: float64
      - name: difference_sec
        tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              name: 'column_type: log_found_videos, difference_sec, float64'
              column_type: float64
          - dbt_utils.expression_is_true:
              name: 'difference_sec != 0'
              expression: "!= 0"
